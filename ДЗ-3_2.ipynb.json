{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "103\n"
     ]
    }
   ],
   "source": [
    "# Задание 1\n",
    "#Напишите функцию, которая возвращает сумму элементов на диагонали. Т. е. 13+32+23+35.\n",
    "data = [\n",
    "    [13, 25, 23, 34],\n",
    "    [45, 32, 44, 47],\n",
    "    [12, 33, 23, 95],\n",
    "    [13, 53, 34, 35]\n",
    "]\n",
    "\n",
    "sum_dioganal = 0\n",
    "for i in range(len(data)):\n",
    "    sum_dioganal  += data[i][i]\n",
    "\n",
    "print(sumMain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "430\n"
     ]
    }
   ],
   "source": [
    "#Задание 2.1\n",
    "# Дан список чисел, часть из которых имеют строковый тип или содержат буквы.\n",
    "# Напишите функцию, которая возвращает сумму квадратов элементов, которые могут быть числами.\n",
    "\n",
    "data_2= [1, '5', 'abc', 20, '2']\n",
    "\n",
    "data_3=[]\n",
    "for x in data_2:\n",
    "    try:\n",
    "        y=int(x)\n",
    "        data_3.append(y)\n",
    "    except (RuntimeError, TypeError, NameError,ZeroDivisionError,ValueError):\n",
    "        continue\n",
    "    #print(data_3)\n",
    "print(sum(y**2 for y in data_3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "430\n"
     ]
    }
   ],
   "source": [
    "#Задание 2.2\n",
    "data_2= [1, '5', 'abc', 20, '2']\n",
    "def sum_(data_2):\n",
    "   return sum(list(map(lambda x: int(x)**2 if str.isnumeric(str(x)) else 0, data_2)))\n",
    "print(sum_(data_2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Задание 3\n",
    "#Напишите функцию, возвращающую сумму первых n чисел Фибоначчи.\n",
    "\n",
    "fib1 = fib2 = 1 \n",
    "n = int(input(\"Номер элемента ряда Фибоначчи: \")) \n",
    "\n",
    "if n < 2:\n",
    "    quit() \n",
    "print(fib1, end=' ')\n",
    "print(fib2, end=' ')\n",
    "for i in range(2, n):\n",
    "    fib1, fib2 = fib2, fib1 + fib2\n",
    "    print(fib2, end=' ')\n",
    " \n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Задание 4\n",
    "# Дан набор данных об обучении студентов на курсе программирования, который содержит:\n",
    "# 1) имя 2) фамилию 3) пол 4) наличие у студента опыта в программировании 5) набор оценок за домашние работы\n",
    "# 6) оценку за итоговую работу.\n",
    "#Напишите программу, которая будет принимать команду от пользователя и возвращать соотвествующий результат.\n",
    "# Список команд: 1 - вывести на экран среднюю оценку за все ДЗ по группе и вывести на экран среднюю оценку за\n",
    "#экзамен по группе; 2 - вывести среднюю оценку за ДЗ и за экзамен по группе в разрезе пола студентов 3\n",
    "#- вывести среднюю оценку за ДЗ и за экзамен в разрезе наличия опыта в программировании у студентов.\n",
    "#Прогрмма должна быть полностью декомпозирована на функции (кроме объявления функций и вызова итоговой функции\n",
    "#в реализации ничего быть не должно).\n",
    "\n",
    "students_list = [\n",
    "    {'name': 'Василий', 'surname': 'Теркин', 'sex': 'м', 'program_exp': True, 'grade': [8, 8, 9, 10, 9], 'exam': 9},\n",
    "    {'name': 'Мария', 'surname': 'Павлова', 'sex': 'ж', 'program_exp': True, 'grade': [7, 8, 9, 7, 9], 'exam': 8},\n",
    "    {'name': 'Ирина', 'surname': 'Андреева', 'sex': 'ж', 'program_exp': True, 'grade': [10, 9, 8, 10, 10], 'exam': 10},\n",
    "    {'name': 'Татьяна', 'surname': 'Сидорова', 'sex': 'ж', 'program_exp': True, 'grade': [7, 8, 8, 9, 8], 'exam': 8},\n",
    "    {'name': 'Иван', 'surname': 'Васильев', 'sex': 'ж', 'program_exp': True, 'grade': [9, 8, 9, 6, 9], 'exam': 10},\n",
    "    {'name': 'Роман', 'surname': 'Золотарев', 'sex': 'ж', 'program_exp': False, 'grade': [8, 9, 9, 6, 9], 'exam': 10}\n",
    "]\n",
    "\n",
    "#1- вывести на экран среднюю оценку за все ДЗ по группе и вывести на экран среднюю оценку за экзамен по группе\n",
    "\n",
    "def get_average_grades(students):\n",
    "    sum_average_hm=0\n",
    "    sum_average_ex=0\n",
    "    for student in students:\n",
    "        sum_average_hm += sum(student['grade']) / len(students)\n",
    "        sum_average_ex += student['exam']\n",
    "    print(\"Средняя оценка за все ДЗ по группе \", round(sum_average_hm/len(students),1))\n",
    "    print(\"Средняя оценка за экзамен по группе \", round(sum_average_ex/len(students),1))      \n",
    "#get_average_grades(students_list)\n",
    "\n",
    "#2 - вывести среднюю оценку за ДЗ и за экзамен по группе в разрезе пола студентов\n",
    "\n",
    "def get_average_grades_sex(students, sex='м'):\n",
    "    sum_average_hm=0\n",
    "    sum_average_ex=0\n",
    "    student_counter=0\n",
    "    for student in students:\n",
    "        if student['sex'] == sex:\n",
    "            sum_average_hm += sum(student['grade']) / len(student['grade'])\n",
    "            sum_average_ex += student['exam']\n",
    "            student_counter+=1\n",
    "    if sex=='м':\n",
    "        print ('Средняя оценка за все ДЗ по группе среди студентов мужского пола', round(sum_average_hm/student_counter,1))\n",
    "        print ('Средняя оценка за экзамен по группе среди студентов мужского пола ', round(sum_average_ex/student_counter,1))\n",
    "    else:\n",
    "        print ('Средняя оценка за все ДЗ по группе среди студентов женского пола ', round(sum_average_hm/student_counter,1))\n",
    "        print ('Средняя оценка за экзамен по группе среди студентов женского пола ', round(sum_average_ex/student_counter,1))\n",
    "#get_average_grades_sex(students_list, sex='м')\n",
    "#get_average_grades_sex(students_list,sex='ж')\n",
    "                   \n",
    "#3 вывести среднюю оценку за ДЗ и за экзамен в разрезе наличия опыта в программировании у студентов\n",
    "\n",
    "def get_average_grades_exp(students, exp=True):\n",
    "    sum_average_hm=0\n",
    "    sum_average_ex=0\n",
    "    student_counter=0\n",
    "    for student in students:\n",
    "        if student['program_exp'] == exp:\n",
    "            sum_average_hm += sum(student['grade']) / len(student['grade'])\n",
    "            sum_average_ex += student['exam']\n",
    "            student_counter+=1\n",
    "    if exp==True:\n",
    "        print ('Средняя оценка за все ДЗ по группе среди опытных студентов ', round(sum_average_hm/student_counter,1))\n",
    "        print ('Средняя оценка за экзамен по группе среди опытных студентов ', round(sum_average_ex/student_counter,1))\n",
    "    else:\n",
    "        print ('Средняя оценка за все ДЗ по группе среди студентов без опыта ', round(sum_average_hm/student_counter,1))\n",
    "        print ('Средняя оценка за экзамен по группе среди студентов без опыта ', round(sum_average_ex/student_counter,1))\n",
    "#get_average_grades_exp(students_list)\n",
    "#get_average_grades_exp(students_list,exp=False)\n",
    " \n",
    "def main():\n",
    "    while True:\n",
    "        user_input = input('Введите команду: ')\n",
    "        if user_input == '1':\n",
    "            get_average_grades(students_list)\n",
    "        elif user_input == '2':\n",
    "            get_average_grades_sex(students_list, sex='м')\n",
    "        elif user_input == '3':\n",
    "            get_average_grades_sex(students_list,sex='ж')\n",
    "        elif user_input == '4':\n",
    "            get_average_grades_exp(students_list,exp=True)\n",
    "        elif user_input == '5':\n",
    "            get_average_grades_exp(students_list,exp=False)\n",
    "        elif user_input == 'q':\n",
    "            print('Конец вычислений')\n",
    "            break\n",
    "main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
