{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{'visit1': ['Москва', 'Россия']}, {'visit3': ['Владимир', 'Россия']}, {'visit7': ['Тула', 'Россия']}, {'visit8': ['Тула', 'Россия']}, {'visit9': ['Курск', 'Россия']}, {'visit10': ['Архангельск', 'Россия']}]\n"
     ]
    }
   ],
   "source": [
    "# ЗАДАНИЕ 1. Дан список с визитами по городам и странам. Напишите код,\n",
    "# который возвращает отфильтрованный список geo_logs, содержащий только визиты из России.\n",
    "# DONE!!!\n",
    "\n",
    "geo_logs = [\n",
    "    {'visit1': ['Москва', 'Россия']},\n",
    "    {'visit2': ['Дели', 'Индия']},\n",
    "    {'visit3': ['Владимир', 'Россия']},\n",
    "    {'visit4': ['Лиссабон', 'Португалия']},\n",
    "    {'visit5': ['Париж', 'Франция']},\n",
    "    {'visit6': ['Лиссабон', 'Португалия']},\n",
    "    {'visit7': ['Тула', 'Россия']},\n",
    "    {'visit8': ['Тула', 'Россия']},\n",
    "    {'visit9': ['Курск', 'Россия']},\n",
    "    {'visit10': ['Архангельск', 'Россия']}\n",
    "]\n",
    "geo_logs_2 = geo_logs.copy()\n",
    "for visit in geo_logs_2:\n",
    "  for country in visit.values():\n",
    "      if 'Россия' in country:\n",
    "          pass\n",
    "      else:\n",
    "          geo_logs.remove(visit)\n",
    "print(geo_logs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{'visit1': ['Москва', 'Россия']}, {'visit3': ['Владимир', 'Россия']}, {'visit7': ['Тула', 'Россия']}, {'visit8': ['Тула', 'Россия']}, {'visit9': ['Курск', 'Россия']}, {'visit10': ['Архангельск', 'Россия']}]\n"
     ]
    }
   ],
   "source": [
    "# ЗАДАНИЕ 1. (вариант 2)\n",
    "geo_logs = [\n",
    "    {'visit1': ['Москва', 'Россия']},\n",
    "    {'visit2': ['Дели', 'Индия']},\n",
    "    {'visit3': ['Владимир', 'Россия']},\n",
    "    {'visit4': ['Лиссабон', 'Португалия']},\n",
    "    {'visit5': ['Париж', 'Франция']},\n",
    "    {'visit6': ['Лиссабон', 'Португалия']},\n",
    "    {'visit7': ['Тула', 'Россия']},\n",
    "    {'visit8': ['Тула', 'Россия']},\n",
    "    {'visit9': ['Курск', 'Россия']},\n",
    "    {'visit10': ['Архангельск', 'Россия']}\n",
    "]\n",
    "geo_logs_2 = geo_logs.copy()\n",
    "for visit in geo_logs_2:\n",
    "  for country in visit.values():\n",
    "      if 'Россия' not in country:\n",
    "          geo_logs.remove(visit)\n",
    "      else:\n",
    "          pass\n",
    "print(geo_logs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[98, 35, 15, 213, 54, 119]\n"
     ]
    }
   ],
   "source": [
    "# ЗАДАНИЕ 2. Выведите на экран все уникальные гео-ID из значений словаря ids.\n",
    "# Т. е. список вида [213, 15, 54, 119, 98, 35]\n",
    "# DONE!!!!!!!!\n",
    "ids = {'user1': [213, 213, 213, 15, 213], \n",
    "       'user2': [54, 54, 119, 119, 119], \n",
    "       'user3': [213, 98, 98, 35]}\n",
    "\n",
    "geo=list(ids.values())\n",
    "result =[]\n",
    "for sublist in geo:\n",
    "    for item in sublist:\n",
    "        result.append(item)\n",
    "result=list(set(result))\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Поисковые запросы из 3 слов встречаются в 57.1% случаев\n",
      "Поисковые запросы из 2 слов встречаются в 42.9% случаев\n"
     ]
    }
   ],
   "source": [
    "# ЗАДАНИЕ 3. Дан список поисковых запросов. Получить распределение количества слов в них.\n",
    "# Т. е. поисковых запросов из одного - слова 5%, из двух - 7%, из трех - 3% и т.д.\n",
    "queries = [\n",
    "    'смотреть сериалы онлайн',\n",
    "    'новости спорта',\n",
    "    'афиша кино',\n",
    "    'курс доллара',\n",
    "    'сериалы этим летом',\n",
    "    'курс по питону',\n",
    "    'сериалы про спорт',\n",
    "]\n",
    "\n",
    "looking_words = [len(phrase.split()) for phrase in queries]\n",
    "q_words = {x:looking_words.count(x) for x in looking_words}\n",
    "for i in q_words:\n",
    "        print(f\"Поисковые запросы из {i} слов встречаются в {round(q_words[i] / len(queries)* 100,1)}% случаев\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "yandex\n"
     ]
    }
   ],
   "source": [
    "# ЗАДАНИЕ 4. Дана статистика рекламных каналов по объемам продаж. Напишите скрипт, который возвращает\n",
    "# название канала с максимальным объемом.Т. е. в данном примере скрипт должен возвращать 'yandex'.\n",
    "# DONE!!!!!!!!\n",
    "stats = {'facebook': 55, 'yandex': 120, 'vk': 115, 'google': 99, 'email': 42, 'ok': 98}\n",
    "\n",
    "max (stats.values())\n",
    "for key , val in stats.items():\n",
    "    if val == max (stats.values()):\n",
    "        print(key)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23.25\n"
     ]
    }
   ],
   "source": [
    "# ЗАДАНИЕ 5. Дан поток логов по количеству просмотренных страниц для каждого пользователя.\n",
    "# Список отсортирован по ID пользователя. Вам необходимо написать алгоритм,\n",
    "# который считает среднее значение просмотров на пользователя.\n",
    "# Т. е. надо посчитать отношение суммы всех просмотров к количеству уникальных пользователей.\n",
    "stream = [\n",
    "    '2018-01-01,user1,3',\n",
    "    '2018-01-07,user1,4',\n",
    "    '2018-03-29,user1,1',\n",
    "    '2018-04-04,user1,13',\n",
    "    '2018-01-05,user2,7',\n",
    "    '2018-06-14,user3,4',\n",
    "    '2018-07-02,user3,10',\n",
    "    '2018-03-21,user4,19',\n",
    "    '2018-03-22,user4,4',\n",
    "    '2018-04-22,user4,8',\n",
    "    '2018-05-03,user4,9',\n",
    "    '2018-05-11,user4,11',\n",
    "]\n",
    "\n",
    "unique_users = []\n",
    "total_pages = 0\n",
    "for visit in stream:\n",
    "   visit = visit.split(',')\n",
    "   total_pages += int(visit[2])\n",
    "   if visit[1] not in unique_users:\n",
    "        unique_users.append(visit[1])\n",
    "print(round(total_pages / len(unique_users), 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Введите дату в формате yyyy-mm-dd 2018-01-03\n",
      "Введите название сайта (google,yandex,market) yandex\n",
      "1327\n"
     ]
    }
   ],
   "source": [
    "# ЗАДАНИЕ 6. Дана статистика рекламных кампаний по дням.\n",
    "# Напишите алгоритм, который по паре дата-кампания ищет значение численного столбца.\n",
    "# Т. е. для даты '2018-01-01' и 'google' нужно получить число 25.\n",
    "# Считайте, что все комбинации дата-кампания уникальны.\n",
    "\n",
    "stats = [\n",
    "    ['2018-01-01', 'google', 25],\n",
    "    ['2018-01-01', 'yandex', 65],\n",
    "    ['2018-01-01', 'market', 89],\n",
    "    ['2018-01-02', 'google', 574],\n",
    "    ['2018-01-02', 'yandex', 249],\n",
    "    ['2018-01-02', 'market', 994],\n",
    "    ['2018-01-03', 'google', 1843],\n",
    "    ['2018-01-03', 'yandex', 1327],\n",
    "    ['2018-01-03', 'market', 1764],\n",
    "]\n",
    "\n",
    "date = input ('Введите дату в формате yyyy-mm-dd ')\n",
    "site = input ('Введите название сайта (google,yandex,market) ')\n",
    "\n",
    "for element in stats:\n",
    "    if site in element and date in element:\n",
    "       print(element[2])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
