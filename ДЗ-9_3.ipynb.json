{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DatetimeIndex(['2019-09-02', '2019-09-03', '2019-09-04', '2019-09-05',\n",
      "               '2019-09-06', '2019-09-07', '2019-09-08', '2019-09-09',\n",
      "               '2019-09-10', '2019-09-11', '2019-09-12', '2019-09-13',\n",
      "               '2019-09-14', '2019-09-15', '2019-09-16', '2019-09-17',\n",
      "               '2019-09-18', '2019-09-19', '2019-09-20', '2019-09-21',\n",
      "               '2019-09-22', '2019-09-23', '2019-09-24', '2019-09-25',\n",
      "               '2019-09-26', '2019-09-27', '2019-09-28', '2019-09-29',\n",
      "               '2019-09-30', '2019-10-01', '2019-10-02', '2019-10-03',\n",
      "               '2019-10-04', '2019-10-05', '2019-10-06', '2019-10-07',\n",
      "               '2019-10-08', '2019-10-09', '2019-10-10', '2019-10-11',\n",
      "               '2019-10-12', '2019-10-13', '2019-10-14', '2019-10-15',\n",
      "               '2019-10-16', '2019-10-17', '2019-10-18', '2019-10-19',\n",
      "               '2019-10-20', '2019-10-21', '2019-10-22', '2019-10-23',\n",
      "               '2019-10-24', '2019-10-25'],\n",
      "              dtype='datetime64[ns]', freq='D')\n"
     ]
    }
   ],
   "source": [
    "#Задание 1\n",
    "#Напишите функцию date_range, которая возвращает список дней между датами start_date и end_date.\n",
    "#Даты должны вводиться в формате YYYY-MM-DD\n",
    "\n",
    "\n",
    "import datetime\n",
    "\n",
    "date1 = '2019-09-02'\n",
    "date2 = '2019-10-25'\n",
    "\n",
    "start = datetime.datetime.strptime(date1, '%Y-%m-%d')\n",
    "end = datetime.datetime.strptime(date2, '%Y-%m-%d')\n",
    "\n",
    "index = pd.date_range(start, end)\n",
    "print(index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-09-02\n",
      "2019-09-03\n",
      "2019-09-04\n",
      "2019-09-05\n",
      "2019-09-06\n",
      "2019-09-07\n",
      "2019-09-08\n",
      "2019-09-09\n",
      "2019-09-10\n",
      "2019-09-11\n",
      "2019-09-12\n",
      "2019-09-13\n",
      "2019-09-14\n",
      "2019-09-15\n",
      "2019-09-16\n",
      "2019-09-17\n",
      "2019-09-18\n",
      "2019-09-19\n",
      "2019-09-20\n",
      "2019-09-21\n",
      "2019-09-22\n",
      "2019-09-23\n",
      "2019-09-24\n",
      "2019-09-25\n",
      "2019-09-26\n",
      "2019-09-27\n",
      "2019-09-28\n",
      "2019-09-29\n",
      "2019-09-30\n",
      "2019-10-01\n",
      "2019-10-02\n",
      "2019-10-03\n",
      "2019-10-04\n",
      "2019-10-05\n",
      "2019-10-06\n",
      "2019-10-07\n",
      "2019-10-08\n",
      "2019-10-09\n",
      "2019-10-10\n",
      "2019-10-11\n",
      "2019-10-12\n",
      "2019-10-13\n",
      "2019-10-14\n",
      "2019-10-15\n",
      "2019-10-16\n",
      "2019-10-17\n",
      "2019-10-18\n",
      "2019-10-19\n",
      "2019-10-20\n",
      "2019-10-21\n",
      "2019-10-22\n",
      "2019-10-23\n",
      "2019-10-24\n",
      "2019-10-25\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Задание 2\n",
    "#Дополните функцию из первого задания проверкой на корректность дат. В случае неверного формата или если\n",
    "#start_date > end_date должен возвращаться пустой список.\n",
    "\n",
    "import datetime\n",
    "\n",
    "date1 = '2019-09-02'\n",
    "date2 = '2019-10-25'\n",
    "\n",
    "start = datetime.datetime.strptime(date1, '%Y-%m-%d')\n",
    "end = datetime.datetime.strptime(date2, '%Y-%m-%d')\n",
    "step = datetime.timedelta(days=1)\n",
    "while start <= end:\n",
    "    print (start.date())\n",
    "    start += step\n",
    "else:\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "#Задание 3\n",
    "#Дан поток дат в формате YYYY-MM-DD, в которых встречаются некорректные значения:\n",
    "#stream = [‘2018-04-02’, ‘2018-02-29’, ‘2018-19-02’]\n",
    "#Напишите функцию, которая проверяет эти даты на корректность. Т. е. для каждой даты возвращает True (дата корректна)\n",
    "#или False (некорректная дата).\n",
    "\n",
    "stream = ['2018-04-02','2018-02-29','2018-19-02']\n",
    "\n",
    "import datetime\n",
    "from datetime import datetime\n",
    "\n",
    "fmt = ('%Y-%m-%d')\n",
    "\n",
    "for e in stream:\n",
    "        try:\n",
    "            datetime.strptime(e, fmt)\n",
    "            print(True)\n",
    "        except ValueError:\n",
    "            print(False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Задание 4\n",
    "#В последнем примере поиска по словарю мы использовали 3 столбца. Напишите функцию, которая формирует словарь\n",
    "#для поиска по n столбцам.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "stats_dict = {}\n",
    "\n",
    "with open('stats.csv') as f:\n",
    "    for line in f:\n",
    "        line = line.strip().split(',')\n",
    "        stats_dict[tuple(line[:n])] = line[n]\n",
    "\n",
    "for key, value in stats_dict.items():\n",
    "    print(key, value)\n",
    "    break"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
